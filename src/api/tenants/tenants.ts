/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query'
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query'
import {
  unref
} from 'vue'
import type {
  MaybeRef
} from 'vue'
import type {
  AtivarTenantParams,
  CreateTenantRequest,
  DesativarTenantParams,
  HttpValidationProblemDetails,
  ObterListaDeTenantsParams,
  ObterStringDeConex√£oDoTenantParams,
  ObterTenantPorIdParams,
  ObterTenantsPorGrupoParams,
  ProblemDetails,
  TenantDto,
  TenantDtoIPagedList,
  TenantGroupDto,
  TenantStrConnResponse
} from '../../interfaces/api/Identity'
import { customInstance } from '.././api-interceptor';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Lista todos os tenants cadastrados.
 */
export const obterListaDeTenants = (
    params?: MaybeRef<ObterListaDeTenantsParams>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<TenantDtoIPagedList>(
      {url: `/api/tenant/all`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getObterListaDeTenantsQueryKey = (params?: MaybeRef<ObterListaDeTenantsParams>,) => {
    return ['api','tenant','all', ...(params ? [params]: [])] as const;
    }

    
export const getObterListaDeTenantsQueryOptions = <TData = Awaited<ReturnType<typeof obterListaDeTenants>>, TError = ProblemDetails>(params?: MaybeRef<ObterListaDeTenantsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterListaDeTenants>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getObterListaDeTenantsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof obterListaDeTenants>>> = ({ signal }) => obterListaDeTenants(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof obterListaDeTenants>>, TError, TData> 
}

export type ObterListaDeTenantsQueryResult = NonNullable<Awaited<ReturnType<typeof obterListaDeTenants>>>
export type ObterListaDeTenantsQueryError = ProblemDetails


/**
 * @summary Lista todos os tenants cadastrados.
 */

export function useObterListaDeTenants<TData = Awaited<ReturnType<typeof obterListaDeTenants>>, TError = ProblemDetails>(
 params?: MaybeRef<ObterListaDeTenantsParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterListaDeTenants>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getObterListaDeTenantsQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Obt√©m um tenant pelo id.
 */
export const obterTenantPorId = (
    params: MaybeRef<ObterTenantPorIdParams>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<TenantDto>(
      {url: `/api/tenant/id`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getObterTenantPorIdQueryKey = (params: MaybeRef<ObterTenantPorIdParams>,) => {
    return ['api','tenant','id', ...(params ? [params]: [])] as const;
    }

    
export const getObterTenantPorIdQueryOptions = <TData = Awaited<ReturnType<typeof obterTenantPorId>>, TError = ProblemDetails>(params: MaybeRef<ObterTenantPorIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterTenantPorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getObterTenantPorIdQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof obterTenantPorId>>> = ({ signal }) => obterTenantPorId(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof obterTenantPorId>>, TError, TData> 
}

export type ObterTenantPorIdQueryResult = NonNullable<Awaited<ReturnType<typeof obterTenantPorId>>>
export type ObterTenantPorIdQueryError = ProblemDetails


/**
 * @summary Obt√©m um tenant pelo id.
 */

export function useObterTenantPorId<TData = Awaited<ReturnType<typeof obterTenantPorId>>, TError = ProblemDetails>(
 params: MaybeRef<ObterTenantPorIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterTenantPorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getObterTenantPorIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Obt√©m todos os tenants de um grupo.
 */
export const obterTenantsPorGrupo = (
    params: MaybeRef<ObterTenantsPorGrupoParams>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<TenantDto[]>(
      {url: `/api/tenant/by-group`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getObterTenantsPorGrupoQueryKey = (params: MaybeRef<ObterTenantsPorGrupoParams>,) => {
    return ['api','tenant','by-group', ...(params ? [params]: [])] as const;
    }

    
export const getObterTenantsPorGrupoQueryOptions = <TData = Awaited<ReturnType<typeof obterTenantsPorGrupo>>, TError = ProblemDetails>(params: MaybeRef<ObterTenantsPorGrupoParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterTenantsPorGrupo>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getObterTenantsPorGrupoQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof obterTenantsPorGrupo>>> = ({ signal }) => obterTenantsPorGrupo(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof obterTenantsPorGrupo>>, TError, TData> 
}

export type ObterTenantsPorGrupoQueryResult = NonNullable<Awaited<ReturnType<typeof obterTenantsPorGrupo>>>
export type ObterTenantsPorGrupoQueryError = ProblemDetails


/**
 * @summary Obt√©m todos os tenants de um grupo.
 */

export function useObterTenantsPorGrupo<TData = Awaited<ReturnType<typeof obterTenantsPorGrupo>>, TError = ProblemDetails>(
 params: MaybeRef<ObterTenantsPorGrupoParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterTenantsPorGrupo>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getObterTenantsPorGrupoQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Obt√©m todos os grupos de tenants.
 */
export const obterTodosOsGruposDeTenants = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TenantGroupDto[]>(
      {url: `/api/tenant/all-groups`, method: 'GET', signal
    },
      options);
    }
  

export const getObterTodosOsGruposDeTenantsQueryKey = () => {
    return ['api','tenant','all-groups'] as const;
    }

    
export const getObterTodosOsGruposDeTenantsQueryOptions = <TData = Awaited<ReturnType<typeof obterTodosOsGruposDeTenants>>, TError = ProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterTodosOsGruposDeTenants>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getObterTodosOsGruposDeTenantsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof obterTodosOsGruposDeTenants>>> = ({ signal }) => obterTodosOsGruposDeTenants(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof obterTodosOsGruposDeTenants>>, TError, TData> 
}

export type ObterTodosOsGruposDeTenantsQueryResult = NonNullable<Awaited<ReturnType<typeof obterTodosOsGruposDeTenants>>>
export type ObterTodosOsGruposDeTenantsQueryError = ProblemDetails


/**
 * @summary Obt√©m todos os grupos de tenants.
 */

export function useObterTodosOsGruposDeTenants<TData = Awaited<ReturnType<typeof obterTodosOsGruposDeTenants>>, TError = ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterTodosOsGruposDeTenants>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getObterTodosOsGruposDeTenantsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Cria um novo tenant.
 */
export const criarTenant = (
    createTenantRequest: MaybeRef<CreateTenantRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      createTenantRequest = unref(createTenantRequest);
      
      return customInstance<string>(
      {url: `/api/tenant/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createTenantRequest, signal
    },
      options);
    }
  


export const getCriarTenantMutationOptions = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarTenant>>, TError,{data: CreateTenantRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof criarTenant>>, TError,{data: CreateTenantRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof criarTenant>>, {data: CreateTenantRequest}> = (props) => {
          const {data} = props ?? {};

          return  criarTenant(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CriarTenantMutationResult = NonNullable<Awaited<ReturnType<typeof criarTenant>>>
    export type CriarTenantMutationBody = CreateTenantRequest
    export type CriarTenantMutationError = HttpValidationProblemDetails | ProblemDetails

    /**
 * @summary Cria um novo tenant.
 */
export const useCriarTenant = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarTenant>>, TError,{data: CreateTenantRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof criarTenant>>,
        TError,
        {data: CreateTenantRequest},
        TContext
      > => {

      const mutationOptions = getCriarTenantMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Ativa um tenant.
 */
export const ativarTenant = (
    params: MaybeRef<AtivarTenantParams>,
 options?: SecondParameter<typeof customInstance>,) => {
      params = unref(params);
      
      return customInstance<string>(
      {url: `/api/tenant/activate`, method: 'PUT',
        params: unref(params)
    },
      options);
    }
  


export const getAtivarTenantMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ativarTenant>>, TError,{params: AtivarTenantParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof ativarTenant>>, TError,{params: AtivarTenantParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof ativarTenant>>, {params: AtivarTenantParams}> = (props) => {
          const {params} = props ?? {};

          return  ativarTenant(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AtivarTenantMutationResult = NonNullable<Awaited<ReturnType<typeof ativarTenant>>>
    
    export type AtivarTenantMutationError = ProblemDetails

    /**
 * @summary Ativa um tenant.
 */
export const useAtivarTenant = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof ativarTenant>>, TError,{params: AtivarTenantParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof ativarTenant>>,
        TError,
        {params: AtivarTenantParams},
        TContext
      > => {

      const mutationOptions = getAtivarTenantMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Desativa um tenant.
 */
export const desativarTenant = (
    params: MaybeRef<DesativarTenantParams>,
 options?: SecondParameter<typeof customInstance>,) => {
      params = unref(params);
      
      return customInstance<string>(
      {url: `/api/tenant/deactivate`, method: 'PUT',
        params: unref(params)
    },
      options);
    }
  


export const getDesativarTenantMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof desativarTenant>>, TError,{params: DesativarTenantParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof desativarTenant>>, TError,{params: DesativarTenantParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof desativarTenant>>, {params: DesativarTenantParams}> = (props) => {
          const {params} = props ?? {};

          return  desativarTenant(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DesativarTenantMutationResult = NonNullable<Awaited<ReturnType<typeof desativarTenant>>>
    
    export type DesativarTenantMutationError = ProblemDetails

    /**
 * @summary Desativa um tenant.
 */
export const useDesativarTenant = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof desativarTenant>>, TError,{params: DesativarTenantParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof desativarTenant>>,
        TError,
        {params: DesativarTenantParams},
        TContext
      > => {

      const mutationOptions = getDesativarTenantMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Obt√©m a string de conex√£o do tenant.
 */
export const obterStringDeConex√£oDoTenant = (
    params: MaybeRef<ObterStringDeConex√£oDoTenantParams>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<TenantStrConnResponse>(
      {url: `/api/tenant/get-connectionstring`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getObterStringDeConex√£oDoTenantQueryKey = (params: MaybeRef<ObterStringDeConex√£oDoTenantParams>,) => {
    return ['api','tenant','get-connectionstring', ...(params ? [params]: [])] as const;
    }

    
export const getObterStringDeConex√£oDoTenantQueryOptions = <TData = Awaited<ReturnType<typeof obterStringDeConex√£oDoTenant>>, TError = ProblemDetails>(params: MaybeRef<ObterStringDeConex√£oDoTenantParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterStringDeConex√£oDoTenant>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getObterStringDeConex√£oDoTenantQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof obterStringDeConex√£oDoTenant>>> = ({ signal }) => obterStringDeConex√£oDoTenant(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof obterStringDeConex√£oDoTenant>>, TError, TData> 
}

export type ObterStringDeConex√£oDoTenantQueryResult = NonNullable<Awaited<ReturnType<typeof obterStringDeConex√£oDoTenant>>>
export type ObterStringDeConex√£oDoTenantQueryError = ProblemDetails


/**
 * @summary Obt√©m a string de conex√£o do tenant.
 */

export function useObterStringDeConex√£oDoTenant<TData = Awaited<ReturnType<typeof obterStringDeConex√£oDoTenant>>, TError = ProblemDetails>(
 params: MaybeRef<ObterStringDeConex√£oDoTenantParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterStringDeConex√£oDoTenant>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getObterStringDeConex√£oDoTenantQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



