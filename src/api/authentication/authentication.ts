/**
 * Generated by orval v7.3.0 游꽄
 * Do not edit manually.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/vue-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationReturnType
} from '@tanstack/vue-query'
import {
  unref
} from 'vue'
import type {
  MaybeRef
} from 'vue'
import type {
  CreateAccessTokenRequest,
  HttpValidationProblemDetails,
  ProblemDetails,
  RefreshTokenRequest,
  TokenResponse
} from '../../interfaces/api/Identity'
import { customInstance } from '.././api-interceptor';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Realiza autentica칞칚o do usu치rio com base nas credenciais fornecidas
 */
export const autenticarOUsu치rio = (
    createAccessTokenRequest: MaybeRef<CreateAccessTokenRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      createAccessTokenRequest = unref(createAccessTokenRequest);
      
      return customInstance<TokenResponse>(
      {url: `/api/token/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAccessTokenRequest, signal
    },
      options);
    }
  


export const getAutenticarOUsu치rioMutationOptions = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof autenticarOUsu치rio>>, TError,{data: CreateAccessTokenRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof autenticarOUsu치rio>>, TError,{data: CreateAccessTokenRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof autenticarOUsu치rio>>, {data: CreateAccessTokenRequest}> = (props) => {
          const {data} = props ?? {};

          return  autenticarOUsu치rio(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AutenticarOUsu치rioMutationResult = NonNullable<Awaited<ReturnType<typeof autenticarOUsu치rio>>>
    export type AutenticarOUsu치rioMutationBody = CreateAccessTokenRequest
    export type AutenticarOUsu치rioMutationError = HttpValidationProblemDetails | ProblemDetails

    /**
 * @summary Realiza autentica칞칚o do usu치rio com base nas credenciais fornecidas
 */
export const useAutenticarOUsuario = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof autenticarOUsu치rio>>, TError,{data: CreateAccessTokenRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof autenticarOUsu치rio>>,
        TError,
        {data: CreateAccessTokenRequest},
        TContext
      > => {

      const mutationOptions = getAutenticarOUsu치rioMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Realiza autentica칞칚o do usu치rio com base no refresh token.
 */
export const refreshToken = (
    refreshTokenRequest: MaybeRef<RefreshTokenRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      refreshTokenRequest = unref(refreshTokenRequest);
      
      return customInstance<TokenResponse>(
      {url: `/api/token/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshTokenRequest, signal
    },
      options);
    }
  


export const getRefreshTokenMutationOptions = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: RefreshTokenRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: RefreshTokenRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof refreshToken>>, {data: RefreshTokenRequest}> = (props) => {
          const {data} = props ?? {};

          return  refreshToken(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof refreshToken>>>
    export type RefreshTokenMutationBody = RefreshTokenRequest
    export type RefreshTokenMutationError = HttpValidationProblemDetails | ProblemDetails

    /**
 * @summary Realiza autentica칞칚o do usu치rio com base no refresh token.
 */
export const useRefreshToken = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: RefreshTokenRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof refreshToken>>,
        TError,
        {data: RefreshTokenRequest},
        TContext
      > => {

      const mutationOptions = getRefreshTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    