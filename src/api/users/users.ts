/**
 * Generated by orval v7.3.0 游꽄
 * Do not edit manually.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query'
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query'
import {
  unref
} from 'vue'
import type {
  MaybeRef
} from 'vue'
import type {
  AlterarStatusDoUsu치rioParams,
  AtualizarUsu치rioParaTenantParams,
  ConfirmarEMailParams,
  ConfirmarTelefoneParams,
  CreateUserRequest,
  ForgotPasswordRequest,
  HttpValidationProblemDetails,
  ObterListaDePerfisParams,
  ObterListaDeUsu치riosParams,
  ObterPermiss칫esDoUsu치rioPorIdParams,
  ObterUsu치rioPorIdParams,
  ProblemDetails,
  ResetPasswordRequest,
  ToggleUserStatusRequest,
  UserDetailsDto,
  UserDetailsDtoIPagedList,
  UserLoginRequest,
  UserLoginResponse,
  UserRoleDto,
  UserTenantCreateUpdateRequest
} from '../../interfaces/api/Identity'
import { customInstance } from '.././api-interceptor';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Loga usu치rio fornecendo lista de tenants que usu치rio tem acesso.
 */
export const loginUsu치rio = (
    userLoginRequest: MaybeRef<UserLoginRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      userLoginRequest = unref(userLoginRequest);
      
      return customInstance<UserLoginResponse>(
      {url: `/api/user/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userLoginRequest, signal
    },
      options);
    }
  


export const getLoginUsu치rioMutationOptions = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginUsu치rio>>, TError,{data: UserLoginRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof loginUsu치rio>>, TError,{data: UserLoginRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginUsu치rio>>, {data: UserLoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  loginUsu치rio(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginUsu치rioMutationResult = NonNullable<Awaited<ReturnType<typeof loginUsu치rio>>>
    export type LoginUsu치rioMutationBody = UserLoginRequest
    export type LoginUsu치rioMutationError = HttpValidationProblemDetails | ProblemDetails

    /**
 * @summary Loga usu치rio fornecendo lista de tenants que usu치rio tem acesso.
 */
export const useLoginUsu치rio = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginUsu치rio>>, TError,{data: UserLoginRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof loginUsu치rio>>,
        TError,
        {data: UserLoginRequest},
        TContext
      > => {

      const mutationOptions = getLoginUsu치rioMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Confirma e-mail do usu치rio atrav칠s de c칩digo.
 */
export const confirmarEMail = (
    params: MaybeRef<ConfirmarEMailParams>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<string>(
      {url: `/api/user/confirm-email`, method: 'POST',
        params: unref(params), signal
    },
      options);
    }
  


export const getConfirmarEMailMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof confirmarEMail>>, TError,{params: ConfirmarEMailParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof confirmarEMail>>, TError,{params: ConfirmarEMailParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof confirmarEMail>>, {params: ConfirmarEMailParams}> = (props) => {
          const {params} = props ?? {};

          return  confirmarEMail(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ConfirmarEMailMutationResult = NonNullable<Awaited<ReturnType<typeof confirmarEMail>>>
    
    export type ConfirmarEMailMutationError = ProblemDetails

    /**
 * @summary Confirma e-mail do usu치rio atrav칠s de c칩digo.
 */
export const useConfirmarEMail = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof confirmarEMail>>, TError,{params: ConfirmarEMailParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof confirmarEMail>>,
        TError,
        {params: ConfirmarEMailParams},
        TContext
      > => {

      const mutationOptions = getConfirmarEMailMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Confirma telefone do usu치rio atrav칠s de c칩digo.
 */
export const confirmarTelefone = (
    params: MaybeRef<ConfirmarTelefoneParams>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<string>(
      {url: `/api/user/confirm-phone-number`, method: 'POST',
        params: unref(params), signal
    },
      options);
    }
  


export const getConfirmarTelefoneMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof confirmarTelefone>>, TError,{params: ConfirmarTelefoneParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof confirmarTelefone>>, TError,{params: ConfirmarTelefoneParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof confirmarTelefone>>, {params: ConfirmarTelefoneParams}> = (props) => {
          const {params} = props ?? {};

          return  confirmarTelefone(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ConfirmarTelefoneMutationResult = NonNullable<Awaited<ReturnType<typeof confirmarTelefone>>>
    
    export type ConfirmarTelefoneMutationError = ProblemDetails

    /**
 * @summary Confirma telefone do usu치rio atrav칠s de c칩digo.
 */
export const useConfirmarTelefone = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof confirmarTelefone>>, TError,{params: ConfirmarTelefoneParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof confirmarTelefone>>,
        TError,
        {params: ConfirmarTelefoneParams},
        TContext
      > => {

      const mutationOptions = getConfirmarTelefoneMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Solicita칞칚o de redefini칞칚o de senha.
 */
export const esqueciMinhaSenha = (
    forgotPasswordRequest: MaybeRef<ForgotPasswordRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      forgotPasswordRequest = unref(forgotPasswordRequest);
      
      return customInstance<string>(
      {url: `/api/user/forgot-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: forgotPasswordRequest, signal
    },
      options);
    }
  


export const getEsqueciMinhaSenhaMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof esqueciMinhaSenha>>, TError,{data: ForgotPasswordRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof esqueciMinhaSenha>>, TError,{data: ForgotPasswordRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof esqueciMinhaSenha>>, {data: ForgotPasswordRequest}> = (props) => {
          const {data} = props ?? {};

          return  esqueciMinhaSenha(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EsqueciMinhaSenhaMutationResult = NonNullable<Awaited<ReturnType<typeof esqueciMinhaSenha>>>
    export type EsqueciMinhaSenhaMutationBody = ForgotPasswordRequest
    export type EsqueciMinhaSenhaMutationError = ProblemDetails

    /**
 * @summary Solicita칞칚o de redefini칞칚o de senha.
 */
export const useEsqueciMinhaSenha = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof esqueciMinhaSenha>>, TError,{data: ForgotPasswordRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof esqueciMinhaSenha>>,
        TError,
        {data: ForgotPasswordRequest},
        TContext
      > => {

      const mutationOptions = getEsqueciMinhaSenhaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Redefini칞칚o de senha.
 */
export const redefinirSenha = (
    resetPasswordRequest: MaybeRef<ResetPasswordRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      resetPasswordRequest = unref(resetPasswordRequest);
      
      return customInstance<string>(
      {url: `/api/user/reset-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resetPasswordRequest, signal
    },
      options);
    }
  


export const getRedefinirSenhaMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof redefinirSenha>>, TError,{data: ResetPasswordRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof redefinirSenha>>, TError,{data: ResetPasswordRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof redefinirSenha>>, {data: ResetPasswordRequest}> = (props) => {
          const {data} = props ?? {};

          return  redefinirSenha(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RedefinirSenhaMutationResult = NonNullable<Awaited<ReturnType<typeof redefinirSenha>>>
    export type RedefinirSenhaMutationBody = ResetPasswordRequest
    export type RedefinirSenhaMutationError = ProblemDetails

    /**
 * @summary Redefini칞칚o de senha.
 */
export const useRedefinirSenha = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof redefinirSenha>>, TError,{data: ResetPasswordRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof redefinirSenha>>,
        TError,
        {data: ResetPasswordRequest},
        TContext
      > => {

      const mutationOptions = getRedefinirSenhaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Localiza usu치rio por Id.
 */
export const obterUsu치rioPorId = (
    params: MaybeRef<ObterUsu치rioPorIdParams>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<UserDetailsDto>(
      {url: `/api/user/id`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getObterUsu치rioPorIdQueryKey = (params: MaybeRef<ObterUsu치rioPorIdParams>,) => {
    return ['api','user','id', ...(params ? [params]: [])] as const;
    }

    
export const getObterUsu치rioPorIdQueryOptions = <TData = Awaited<ReturnType<typeof obterUsu치rioPorId>>, TError = ProblemDetails>(params: MaybeRef<ObterUsu치rioPorIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterUsu치rioPorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getObterUsu치rioPorIdQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof obterUsu치rioPorId>>> = ({ signal }) => obterUsu치rioPorId(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof obterUsu치rioPorId>>, TError, TData> 
}

export type ObterUsu치rioPorIdQueryResult = NonNullable<Awaited<ReturnType<typeof obterUsu치rioPorId>>>
export type ObterUsu치rioPorIdQueryError = ProblemDetails


/**
 * @summary Localiza usu치rio por Id.
 */

export function useObterUsu치rioPorId<TData = Awaited<ReturnType<typeof obterUsu치rioPorId>>, TError = ProblemDetails>(
 params: MaybeRef<ObterUsu치rioPorIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterUsu치rioPorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getObterUsu치rioPorIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Lista todos os usu치rios cadastrados.
 */
export const obterListaDeUsu치rios = (
    params?: MaybeRef<ObterListaDeUsu치riosParams>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<UserDetailsDtoIPagedList>(
      {url: `/api/user/all`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getObterListaDeUsu치riosQueryKey = (params?: MaybeRef<ObterListaDeUsu치riosParams>,) => {
    return ['api','user','all', ...(params ? [params]: [])] as const;
    }

    
export const getObterListaDeUsu치riosQueryOptions = <TData = Awaited<ReturnType<typeof obterListaDeUsu치rios>>, TError = ProblemDetails>(params?: MaybeRef<ObterListaDeUsu치riosParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterListaDeUsu치rios>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getObterListaDeUsu치riosQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof obterListaDeUsu치rios>>> = ({ signal }) => obterListaDeUsu치rios(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof obterListaDeUsu치rios>>, TError, TData> 
}

export type ObterListaDeUsu치riosQueryResult = NonNullable<Awaited<ReturnType<typeof obterListaDeUsu치rios>>>
export type ObterListaDeUsu치riosQueryError = ProblemDetails


/**
 * @summary Lista todos os usu치rios cadastrados.
 */

export function useObterListaDeUsu치rios<TData = Awaited<ReturnType<typeof obterListaDeUsu치rios>>, TError = ProblemDetails>(
 params?: MaybeRef<ObterListaDeUsu치riosParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterListaDeUsu치rios>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getObterListaDeUsu치riosQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Lista todos os perfis cadastrados.
 */
export const obterListaDePerfis = (
    params: MaybeRef<ObterListaDePerfisParams>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<UserRoleDto[]>(
      {url: `/api/user/roles`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getObterListaDePerfisQueryKey = (params: MaybeRef<ObterListaDePerfisParams>,) => {
    return ['api','user','roles', ...(params ? [params]: [])] as const;
    }

    
export const getObterListaDePerfisQueryOptions = <TData = Awaited<ReturnType<typeof obterListaDePerfis>>, TError = ProblemDetails>(params: MaybeRef<ObterListaDePerfisParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterListaDePerfis>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getObterListaDePerfisQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof obterListaDePerfis>>> = ({ signal }) => obterListaDePerfis(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof obterListaDePerfis>>, TError, TData> 
}

export type ObterListaDePerfisQueryResult = NonNullable<Awaited<ReturnType<typeof obterListaDePerfis>>>
export type ObterListaDePerfisQueryError = ProblemDetails


/**
 * @summary Lista todos os perfis cadastrados.
 */

export function useObterListaDePerfis<TData = Awaited<ReturnType<typeof obterListaDePerfis>>, TError = ProblemDetails>(
 params: MaybeRef<ObterListaDePerfisParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterListaDePerfis>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getObterListaDePerfisQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Cria um novo usu치rio.
 */
export const criarUsu치rio = (
    createUserRequest: MaybeRef<CreateUserRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      createUserRequest = unref(createUserRequest);
      
      return customInstance<string>(
      {url: `/api/user/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserRequest, signal
    },
      options);
    }
  


export const getCriarUsu치rioMutationOptions = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarUsu치rio>>, TError,{data: CreateUserRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof criarUsu치rio>>, TError,{data: CreateUserRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof criarUsu치rio>>, {data: CreateUserRequest}> = (props) => {
          const {data} = props ?? {};

          return  criarUsu치rio(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CriarUsu치rioMutationResult = NonNullable<Awaited<ReturnType<typeof criarUsu치rio>>>
    export type CriarUsu치rioMutationBody = CreateUserRequest
    export type CriarUsu치rioMutationError = HttpValidationProblemDetails | ProblemDetails

    /**
 * @summary Cria um novo usu치rio.
 */
export const useCriarUsu치rio = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarUsu치rio>>, TError,{data: CreateUserRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof criarUsu치rio>>,
        TError,
        {data: CreateUserRequest},
        TContext
      > => {

      const mutationOptions = getCriarUsu치rioMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Cria um novo usu치rio, na api identidade e na base do tenant.
 */
export const criarUsu치rioNoTenant = (
    createUserRequest: MaybeRef<CreateUserRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      createUserRequest = unref(createUserRequest);
      
      return customInstance<string>(
      {url: `/api/user/create-in-tenant`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserRequest, signal
    },
      options);
    }
  


export const getCriarUsu치rioNoTenantMutationOptions = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarUsu치rioNoTenant>>, TError,{data: CreateUserRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof criarUsu치rioNoTenant>>, TError,{data: CreateUserRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof criarUsu치rioNoTenant>>, {data: CreateUserRequest}> = (props) => {
          const {data} = props ?? {};

          return  criarUsu치rioNoTenant(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CriarUsu치rioNoTenantMutationResult = NonNullable<Awaited<ReturnType<typeof criarUsu치rioNoTenant>>>
    export type CriarUsu치rioNoTenantMutationBody = CreateUserRequest
    export type CriarUsu치rioNoTenantMutationError = HttpValidationProblemDetails | ProblemDetails

    /**
 * @summary Cria um novo usu치rio, na api identidade e na base do tenant.
 */
export const useCriarUsu치rioNoTenant = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarUsu치rioNoTenant>>, TError,{data: CreateUserRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof criarUsu치rioNoTenant>>,
        TError,
        {data: CreateUserRequest},
        TContext
      > => {

      const mutationOptions = getCriarUsu치rioNoTenantMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Localiza permiss칫es do usu치rio por Id.
 */
export const obterPermiss칫esDoUsu치rioPorId = (
    params: MaybeRef<ObterPermiss칫esDoUsu치rioPorIdParams>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<string[]>(
      {url: `/api/user/permissions`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getObterPermiss칫esDoUsu치rioPorIdQueryKey = (params: MaybeRef<ObterPermiss칫esDoUsu치rioPorIdParams>,) => {
    return ['api','user','permissions', ...(params ? [params]: [])] as const;
    }

    
export const getObterPermiss칫esDoUsu치rioPorIdQueryOptions = <TData = Awaited<ReturnType<typeof obterPermiss칫esDoUsu치rioPorId>>, TError = ProblemDetails>(params: MaybeRef<ObterPermiss칫esDoUsu치rioPorIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterPermiss칫esDoUsu치rioPorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getObterPermiss칫esDoUsu치rioPorIdQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof obterPermiss칫esDoUsu치rioPorId>>> = ({ signal }) => obterPermiss칫esDoUsu치rioPorId(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof obterPermiss칫esDoUsu치rioPorId>>, TError, TData> 
}

export type ObterPermiss칫esDoUsu치rioPorIdQueryResult = NonNullable<Awaited<ReturnType<typeof obterPermiss칫esDoUsu치rioPorId>>>
export type ObterPermiss칫esDoUsu치rioPorIdQueryError = ProblemDetails


/**
 * @summary Localiza permiss칫es do usu치rio por Id.
 */

export function useObterPermiss칫esDoUsu치rioPorId<TData = Awaited<ReturnType<typeof obterPermiss칫esDoUsu치rioPorId>>, TError = ProblemDetails>(
 params: MaybeRef<ObterPermiss칫esDoUsu치rioPorIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterPermiss칫esDoUsu치rioPorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getObterPermiss칫esDoUsu치rioPorIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Ativa ou desativa um usu치rio.
 */
export const alterarStatusDoUsu치rio = (
    toggleUserStatusRequest: MaybeRef<ToggleUserStatusRequest>,
    params: MaybeRef<AlterarStatusDoUsu치rioParams>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      toggleUserStatusRequest = unref(toggleUserStatusRequest);
params = unref(params);
      
      return customInstance<string>(
      {url: `/api/user/toggle-status`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: toggleUserStatusRequest,
        params: unref(params), signal
    },
      options);
    }
  


export const getAlterarStatusDoUsu치rioMutationOptions = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof alterarStatusDoUsu치rio>>, TError,{data: ToggleUserStatusRequest;params: AlterarStatusDoUsu치rioParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof alterarStatusDoUsu치rio>>, TError,{data: ToggleUserStatusRequest;params: AlterarStatusDoUsu치rioParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof alterarStatusDoUsu치rio>>, {data: ToggleUserStatusRequest;params: AlterarStatusDoUsu치rioParams}> = (props) => {
          const {data,params} = props ?? {};

          return  alterarStatusDoUsu치rio(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AlterarStatusDoUsu치rioMutationResult = NonNullable<Awaited<ReturnType<typeof alterarStatusDoUsu치rio>>>
    export type AlterarStatusDoUsu치rioMutationBody = ToggleUserStatusRequest
    export type AlterarStatusDoUsu치rioMutationError = HttpValidationProblemDetails | ProblemDetails

    /**
 * @summary Ativa ou desativa um usu치rio.
 */
export const useAlterarStatusDoUsu치rio = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof alterarStatusDoUsu치rio>>, TError,{data: ToggleUserStatusRequest;params: AlterarStatusDoUsu치rioParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof alterarStatusDoUsu치rio>>,
        TError,
        {data: ToggleUserStatusRequest;params: AlterarStatusDoUsu치rioParams},
        TContext
      > => {

      const mutationOptions = getAlterarStatusDoUsu치rioMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Cria um usu치rio para os tenants especificados.
 */
export const criarUsu치rioParaTenant = (
    userTenantCreateUpdateRequest: MaybeRef<UserTenantCreateUpdateRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      userTenantCreateUpdateRequest = unref(userTenantCreateUpdateRequest);
      
      return customInstance<string>(
      {url: `/api/user/create-user-tenant`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userTenantCreateUpdateRequest, signal
    },
      options);
    }
  


export const getCriarUsu치rioParaTenantMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarUsu치rioParaTenant>>, TError,{data: UserTenantCreateUpdateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof criarUsu치rioParaTenant>>, TError,{data: UserTenantCreateUpdateRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof criarUsu치rioParaTenant>>, {data: UserTenantCreateUpdateRequest}> = (props) => {
          const {data} = props ?? {};

          return  criarUsu치rioParaTenant(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CriarUsu치rioParaTenantMutationResult = NonNullable<Awaited<ReturnType<typeof criarUsu치rioParaTenant>>>
    export type CriarUsu치rioParaTenantMutationBody = UserTenantCreateUpdateRequest
    export type CriarUsu치rioParaTenantMutationError = ProblemDetails

    /**
 * @summary Cria um usu치rio para os tenants especificados.
 */
export const useCriarUsu치rioParaTenant = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarUsu치rioParaTenant>>, TError,{data: UserTenantCreateUpdateRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof criarUsu치rioParaTenant>>,
        TError,
        {data: UserTenantCreateUpdateRequest},
        TContext
      > => {

      const mutationOptions = getCriarUsu치rioParaTenantMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Atualiza um usu치rio para os tenants especificados.
 */
export const atualizarUsu치rioParaTenant = (
    userTenantCreateUpdateRequest: MaybeRef<UserTenantCreateUpdateRequest>,
    params: MaybeRef<AtualizarUsu치rioParaTenantParams>,
 options?: SecondParameter<typeof customInstance>,) => {
      userTenantCreateUpdateRequest = unref(userTenantCreateUpdateRequest);
params = unref(params);
      
      return customInstance<string>(
      {url: `/api/user/update-user-tenant`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userTenantCreateUpdateRequest,
        params: unref(params)
    },
      options);
    }
  


export const getAtualizarUsu치rioParaTenantMutationOptions = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof atualizarUsu치rioParaTenant>>, TError,{data: UserTenantCreateUpdateRequest;params: AtualizarUsu치rioParaTenantParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof atualizarUsu치rioParaTenant>>, TError,{data: UserTenantCreateUpdateRequest;params: AtualizarUsu치rioParaTenantParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof atualizarUsu치rioParaTenant>>, {data: UserTenantCreateUpdateRequest;params: AtualizarUsu치rioParaTenantParams}> = (props) => {
          const {data,params} = props ?? {};

          return  atualizarUsu치rioParaTenant(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AtualizarUsu치rioParaTenantMutationResult = NonNullable<Awaited<ReturnType<typeof atualizarUsu치rioParaTenant>>>
    export type AtualizarUsu치rioParaTenantMutationBody = UserTenantCreateUpdateRequest
    export type AtualizarUsu치rioParaTenantMutationError = HttpValidationProblemDetails | ProblemDetails

    /**
 * @summary Atualiza um usu치rio para os tenants especificados.
 */
export const useAtualizarUsu치rioParaTenant = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof atualizarUsu치rioParaTenant>>, TError,{data: UserTenantCreateUpdateRequest;params: AtualizarUsu치rioParaTenantParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof atualizarUsu치rioParaTenant>>,
        TError,
        {data: UserTenantCreateUpdateRequest;params: AtualizarUsu치rioParaTenantParams},
        TContext
      > => {

      const mutationOptions = getAtualizarUsu치rioParaTenantMutationOptions(options);

      return useMutation(mutationOptions);
    }
    