/**
 * Generated by orval v7.3.0 游꽄
 * Do not edit manually.
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  UserDetailsDto,
  UserDetailsDtoIPagedList,
  UserLoginResponse,
  UserRoleDto
} from '../../interfaces/api/Identity'

export const getLoginUsu치rioResponseMock = (overrideResponse: Partial< UserLoginResponse > = {}): UserLoginResponse => ({email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emailConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), firstName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), imageUrl: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), isActive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), lastName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), phoneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), tenantId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), tenants: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({adminEmail: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), connectionString: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), isActive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), issuer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), licenseId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), tenantGroupId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), tenantsLicense: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ativo: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), demonstracao: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), funcionalidade: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), licenseKey: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), tenantId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), validoAte: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), validUpto: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), ...overrideResponse})

export const getConfirmarEMailResponseMock = (): string => (faker.word.sample())

export const getConfirmarTelefoneResponseMock = (): string => (faker.word.sample())

export const getEsqueciMinhaSenhaResponseMock = (): string => (faker.word.sample())

export const getRedefinirSenhaResponseMock = (): string => (faker.word.sample())

export const getObterUsu치rioPorIdResponseMock = (overrideResponse: Partial< UserDetailsDto > = {}): UserDetailsDto => ({email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emailConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), firstName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), imageUrl: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), isActive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), lastName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), phoneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), tenantId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), ...overrideResponse})

export const getObterListaDeUsu치riosResponseMock = (overrideResponse: Partial< UserDetailsDtoIPagedList > = {}): UserDetailsDtoIPagedList => ({hasNext: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), hasPrevious: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), items: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({email: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), emailConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), firstName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), imageUrl: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), isActive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), lastName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), phoneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), tenantId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined])})), undefined]), pageIndex: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalItems: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPages: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getObterListaDePerfisResponseMock = (): UserRoleDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), roleId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), roleName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined])})))

export const getCriarUsu치rioResponseMock = (): string => (faker.word.sample())

export const getCriarUsu치rioNoTenantResponseMock = (): string => (faker.word.sample())

export const getObterPermiss칫esDoUsu치rioPorIdResponseMock = (): string[] => (Array.from({length: faker.number.int({min: 1,max: 10})}, () => faker.word.sample()))

export const getAlterarStatusDoUsu치rioResponseMock = (): string => (faker.word.sample())

export const getCriarUsu치rioParaTenantResponseMock = (): string => (faker.word.sample())

export const getAtualizarUsu치rioParaTenantResponseMock = (): string => (faker.word.sample())


export const getLoginUsu치rioMockHandler = (overrideResponse?: UserLoginResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UserLoginResponse> | UserLoginResponse)) => {
  return http.post('*/api/user/login', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getLoginUsu치rioResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getConfirmarEMailMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<string> | string)) => {
  return http.post('*/api/user/confirm-email', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getConfirmarEMailResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getConfirmarTelefoneMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<string> | string)) => {
  return http.post('*/api/user/confirm-phone-number', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getConfirmarTelefoneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getEsqueciMinhaSenhaMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<string> | string)) => {
  return http.post('*/api/user/forgot-password', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getEsqueciMinhaSenhaResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getRedefinirSenhaMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<string> | string)) => {
  return http.post('*/api/user/reset-password', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRedefinirSenhaResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getObterUsu치rioPorIdMockHandler = (overrideResponse?: UserDetailsDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserDetailsDto> | UserDetailsDto)) => {
  return http.get('*/api/user/id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getObterUsu치rioPorIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getObterListaDeUsu치riosMockHandler = (overrideResponse?: UserDetailsDtoIPagedList | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserDetailsDtoIPagedList> | UserDetailsDtoIPagedList)) => {
  return http.get('*/api/user/all', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getObterListaDeUsu치riosResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getObterListaDePerfisMockHandler = (overrideResponse?: UserRoleDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserRoleDto[]> | UserRoleDto[])) => {
  return http.get('*/api/user/roles', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getObterListaDePerfisResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCriarUsu치rioMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<string> | string)) => {
  return http.post('*/api/user/create', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCriarUsu치rioResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCriarUsu치rioNoTenantMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<string> | string)) => {
  return http.post('*/api/user/create-in-tenant', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCriarUsu치rioNoTenantResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getObterPermiss칫esDoUsu치rioPorIdMockHandler = (overrideResponse?: string[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<string[]> | string[])) => {
  return http.get('*/api/user/permissions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getObterPermiss칫esDoUsu치rioPorIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAlterarStatusDoUsu치rioMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<string> | string)) => {
  return http.post('*/api/user/toggle-status', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAlterarStatusDoUsu치rioResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCriarUsu치rioParaTenantMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<string> | string)) => {
  return http.post('*/api/user/create-user-tenant', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCriarUsu치rioParaTenantResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAtualizarUsu치rioParaTenantMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<string> | string)) => {
  return http.put('*/api/user/update-user-tenant', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAtualizarUsu치rioParaTenantResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getUsersMock = () => [
  getLoginUsu치rioMockHandler(),
  getConfirmarEMailMockHandler(),
  getConfirmarTelefoneMockHandler(),
  getEsqueciMinhaSenhaMockHandler(),
  getRedefinirSenhaMockHandler(),
  getObterUsu치rioPorIdMockHandler(),
  getObterListaDeUsu치riosMockHandler(),
  getObterListaDePerfisMockHandler(),
  getCriarUsu치rioMockHandler(),
  getCriarUsu치rioNoTenantMockHandler(),
  getObterPermiss칫esDoUsu치rioPorIdMockHandler(),
  getAlterarStatusDoUsu치rioMockHandler(),
  getCriarUsu치rioParaTenantMockHandler(),
  getAtualizarUsu치rioParaTenantMockHandler()
]
