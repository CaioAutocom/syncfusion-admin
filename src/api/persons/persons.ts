/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query'
import type {
  DataTag,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query'
import {
  unref
} from 'vue'
import type {
  MaybeRef
} from 'vue'
import type {
  AtualizarPessoaParams,
  CreatePersonRequest,
  DeletarPessoaParams,
  HttpValidationProblemDetails,
  ListarPessoasParams,
  ObterPessoaPorCpfCnpjParams,
  ObterPessoaPorIdParams,
  ObterPessoaPorNomeParams,
  PersonResponse,
  PersonResponseIPagedList,
  ProblemDetails,
  UpdatePersonRequest
} from '../../interfaces/api/Identity'
import { customInstance } from '.././api-interceptor';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Cria uma nova pessoa.
 */
export const criarPessoa = (
    createPersonRequest: MaybeRef<CreatePersonRequest>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      createPersonRequest = unref(createPersonRequest);
      
      return customInstance<string>(
      {url: `/api/person/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPersonRequest, signal
    },
      options);
    }
  


export const getCriarPessoaMutationOptions = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarPessoa>>, TError,{data: CreatePersonRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof criarPessoa>>, TError,{data: CreatePersonRequest}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof criarPessoa>>, {data: CreatePersonRequest}> = (props) => {
          const {data} = props ?? {};

          return  criarPessoa(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CriarPessoaMutationResult = NonNullable<Awaited<ReturnType<typeof criarPessoa>>>
    export type CriarPessoaMutationBody = CreatePersonRequest
    export type CriarPessoaMutationError = HttpValidationProblemDetails | ProblemDetails

    /**
 * @summary Cria uma nova pessoa.
 */
export const useCriarPessoa = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarPessoa>>, TError,{data: CreatePersonRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof criarPessoa>>,
        TError,
        {data: CreatePersonRequest},
        TContext
      > => {

      const mutationOptions = getCriarPessoaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Obt√©m uma pessoa pelo Id.
 */
export const obterPessoaPorId = (
    params: MaybeRef<ObterPessoaPorIdParams>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<PersonResponse>(
      {url: `/api/person/id`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getObterPessoaPorIdQueryKey = (params: MaybeRef<ObterPessoaPorIdParams>,) => {
    return ['api','person','id', ...(params ? [params]: [])] as const;
    }

    
export const getObterPessoaPorIdQueryOptions = <TData = Awaited<ReturnType<typeof obterPessoaPorId>>, TError = ProblemDetails>(params: MaybeRef<ObterPessoaPorIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterPessoaPorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getObterPessoaPorIdQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof obterPessoaPorId>>> = ({ signal }) => obterPessoaPorId(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof obterPessoaPorId>>, TError, TData> 
}

export type ObterPessoaPorIdQueryResult = NonNullable<Awaited<ReturnType<typeof obterPessoaPorId>>>
export type ObterPessoaPorIdQueryError = ProblemDetails


/**
 * @summary Obt√©m uma pessoa pelo Id.
 */

export function useObterPessoaPorId<TData = Awaited<ReturnType<typeof obterPessoaPorId>>, TError = ProblemDetails>(
 params: MaybeRef<ObterPessoaPorIdParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterPessoaPorId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getObterPessoaPorIdQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Obt√©m uma pessoa pelo Nome.
 */
export const obterPessoaPorNome = (
    params: MaybeRef<ObterPessoaPorNomeParams>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<PersonResponse>(
      {url: `/api/person/name`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getObterPessoaPorNomeQueryKey = (params: MaybeRef<ObterPessoaPorNomeParams>,) => {
    return ['api','person','name', ...(params ? [params]: [])] as const;
    }

    
export const getObterPessoaPorNomeQueryOptions = <TData = Awaited<ReturnType<typeof obterPessoaPorNome>>, TError = ProblemDetails>(params: MaybeRef<ObterPessoaPorNomeParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterPessoaPorNome>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getObterPessoaPorNomeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof obterPessoaPorNome>>> = ({ signal }) => obterPessoaPorNome(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof obterPessoaPorNome>>, TError, TData> 
}

export type ObterPessoaPorNomeQueryResult = NonNullable<Awaited<ReturnType<typeof obterPessoaPorNome>>>
export type ObterPessoaPorNomeQueryError = ProblemDetails


/**
 * @summary Obt√©m uma pessoa pelo Nome.
 */

export function useObterPessoaPorNome<TData = Awaited<ReturnType<typeof obterPessoaPorNome>>, TError = ProblemDetails>(
 params: MaybeRef<ObterPessoaPorNomeParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterPessoaPorNome>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getObterPessoaPorNomeQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Obt√©m uma pessoa pelo CpfCnpj.
 */
export const obterPessoaPorCpfCnpj = (
    params: MaybeRef<ObterPessoaPorCpfCnpjParams>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<PersonResponse>(
      {url: `/api/person/cpfCnpj`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getObterPessoaPorCpfCnpjQueryKey = (params: MaybeRef<ObterPessoaPorCpfCnpjParams>,) => {
    return ['api','person','cpfCnpj', ...(params ? [params]: [])] as const;
    }

    
export const getObterPessoaPorCpfCnpjQueryOptions = <TData = Awaited<ReturnType<typeof obterPessoaPorCpfCnpj>>, TError = ProblemDetails>(params: MaybeRef<ObterPessoaPorCpfCnpjParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterPessoaPorCpfCnpj>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getObterPessoaPorCpfCnpjQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof obterPessoaPorCpfCnpj>>> = ({ signal }) => obterPessoaPorCpfCnpj(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof obterPessoaPorCpfCnpj>>, TError, TData> 
}

export type ObterPessoaPorCpfCnpjQueryResult = NonNullable<Awaited<ReturnType<typeof obterPessoaPorCpfCnpj>>>
export type ObterPessoaPorCpfCnpjQueryError = ProblemDetails


/**
 * @summary Obt√©m uma pessoa pelo CpfCnpj.
 */

export function useObterPessoaPorCpfCnpj<TData = Awaited<ReturnType<typeof obterPessoaPorCpfCnpj>>, TError = ProblemDetails>(
 params: MaybeRef<ObterPessoaPorCpfCnpjParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof obterPessoaPorCpfCnpj>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getObterPessoaPorCpfCnpjQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Lista todas as pessoas cadastradas.
 */
export const listarPessoas = (
    params?: MaybeRef<ListarPessoasParams>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      params = unref(params);
      
      return customInstance<PersonResponseIPagedList>(
      {url: `/api/person/list-all`, method: 'GET',
        params: unref(params), signal
    },
      options);
    }
  

export const getListarPessoasQueryKey = (params?: MaybeRef<ListarPessoasParams>,) => {
    return ['api','person','list-all', ...(params ? [params]: [])] as const;
    }

    
export const getListarPessoasQueryOptions = <TData = Awaited<ReturnType<typeof listarPessoas>>, TError = ProblemDetails>(params?: MaybeRef<ListarPessoasParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarPessoas>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  getListarPessoasQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listarPessoas>>> = ({ signal }) => listarPessoas(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listarPessoas>>, TError, TData> 
}

export type ListarPessoasQueryResult = NonNullable<Awaited<ReturnType<typeof listarPessoas>>>
export type ListarPessoasQueryError = ProblemDetails


/**
 * @summary Lista todas as pessoas cadastradas.
 */

export function useListarPessoas<TData = Awaited<ReturnType<typeof listarPessoas>>, TError = ProblemDetails>(
 params?: MaybeRef<ListarPessoasParams>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarPessoas>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getListarPessoasQueryOptions(params,options)

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData>;

  return query;
}



/**
 * @summary Atualiza dados da pessoa.
 */
export const atualizarPessoa = (
    updatePersonRequest: MaybeRef<UpdatePersonRequest>,
    params: MaybeRef<AtualizarPessoaParams>,
 options?: SecondParameter<typeof customInstance>,) => {
      updatePersonRequest = unref(updatePersonRequest);
params = unref(params);
      
      return customInstance<void>(
      {url: `/api/person/update`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePersonRequest,
        params: unref(params)
    },
      options);
    }
  


export const getAtualizarPessoaMutationOptions = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof atualizarPessoa>>, TError,{data: UpdatePersonRequest;params: AtualizarPessoaParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof atualizarPessoa>>, TError,{data: UpdatePersonRequest;params: AtualizarPessoaParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof atualizarPessoa>>, {data: UpdatePersonRequest;params: AtualizarPessoaParams}> = (props) => {
          const {data,params} = props ?? {};

          return  atualizarPessoa(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AtualizarPessoaMutationResult = NonNullable<Awaited<ReturnType<typeof atualizarPessoa>>>
    export type AtualizarPessoaMutationBody = UpdatePersonRequest
    export type AtualizarPessoaMutationError = HttpValidationProblemDetails | ProblemDetails

    /**
 * @summary Atualiza dados da pessoa.
 */
export const useAtualizarPessoa = <TError = HttpValidationProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof atualizarPessoa>>, TError,{data: UpdatePersonRequest;params: AtualizarPessoaParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof atualizarPessoa>>,
        TError,
        {data: UpdatePersonRequest;params: AtualizarPessoaParams},
        TContext
      > => {

      const mutationOptions = getAtualizarPessoaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Deleta uma pessoa.
 */
export const deletarPessoa = (
    params: MaybeRef<DeletarPessoaParams>,
 options?: SecondParameter<typeof customInstance>,) => {
      params = unref(params);
      
      return customInstance<void>(
      {url: `/api/person/delete`, method: 'DELETE',
        params: unref(params)
    },
      options);
    }
  


export const getDeletarPessoaMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletarPessoa>>, TError,{params: DeletarPessoaParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deletarPessoa>>, TError,{params: DeletarPessoaParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletarPessoa>>, {params: DeletarPessoaParams}> = (props) => {
          const {params} = props ?? {};

          return  deletarPessoa(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletarPessoaMutationResult = NonNullable<Awaited<ReturnType<typeof deletarPessoa>>>
    
    export type DeletarPessoaMutationError = ProblemDetails

    /**
 * @summary Deleta uma pessoa.
 */
export const useDeletarPessoa = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletarPessoa>>, TError,{params: DeletarPessoaParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationReturnType<
        Awaited<ReturnType<typeof deletarPessoa>>,
        TError,
        {params: DeletarPessoaParams},
        TContext
      > => {

      const mutationOptions = getDeletarPessoaMutationOptions(options);

      return useMutation(mutationOptions);
    }
    