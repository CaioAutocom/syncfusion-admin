/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  TenantDto,
  TenantDtoIPagedList,
  TenantGroupDto,
  TenantStrConnResponse
} from '../../interfaces/api'

export const getObterListaDeTenantsResponseMock = (overrideResponse: Partial< TenantDtoIPagedList > = {}): TenantDtoIPagedList => ({hasNext: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), hasPrevious: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), items: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({adminEmail: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), connectionString: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), isActive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), issuer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), licenseId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), tenantGroupId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), tenantsLicense: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ativo: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), demonstracao: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), funcionalidade: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), licenseKey: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), tenantId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), validoAte: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), validUpto: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), pageIndex: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalItems: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPages: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getObterTenantPorIdResponseMock = (overrideResponse: Partial< TenantDto > = {}): TenantDto => ({adminEmail: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), connectionString: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), isActive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), issuer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), licenseId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), tenantGroupId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), tenantsLicense: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ativo: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), demonstracao: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), funcionalidade: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), licenseKey: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), tenantId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), validoAte: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), validUpto: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getObterTenantsPorGrupoResponseMock = (): TenantDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({adminEmail: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), connectionString: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), isActive: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), issuer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), licenseId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), tenantGroupId: faker.helpers.arrayElement([faker.string.uuid(), undefined]), tenantsLicense: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ativo: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), demonstracao: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), funcionalidade: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), licenseKey: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), tenantId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), validoAte: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), validUpto: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getObterTodosOsGruposDeTenantsResponseMock = (): TenantGroupDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.uuid(), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined])})))

export const getCriarTenantResponseMock = (): string => (faker.word.sample())

export const getAtivarTenantResponseMock = (): string => (faker.word.sample())

export const getDesativarTenantResponseMock = (): string => (faker.word.sample())

export const getObterStringDeConex√£oDoTenantResponseMock = (overrideResponse: Partial< TenantStrConnResponse > = {}): TenantStrConnResponse => ({connStringBasicRecords: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), connStringCepRecords: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), connStringProductsBasic: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), connStringTenant: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), schemaName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), ...overrideResponse})


export const getObterListaDeTenantsMockHandler = (overrideResponse?: TenantDtoIPagedList | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TenantDtoIPagedList> | TenantDtoIPagedList)) => {
  return http.get('*/api/tenant/all', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getObterListaDeTenantsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getObterTenantPorIdMockHandler = (overrideResponse?: TenantDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TenantDto> | TenantDto)) => {
  return http.get('*/api/tenant/id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getObterTenantPorIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getObterTenantsPorGrupoMockHandler = (overrideResponse?: TenantDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TenantDto[]> | TenantDto[])) => {
  return http.get('*/api/tenant/by-group', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getObterTenantsPorGrupoResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getObterTodosOsGruposDeTenantsMockHandler = (overrideResponse?: TenantGroupDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TenantGroupDto[]> | TenantGroupDto[])) => {
  return http.get('*/api/tenant/all-groups', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getObterTodosOsGruposDeTenantsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCriarTenantMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<string> | string)) => {
  return http.post('*/api/tenant/create', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCriarTenantResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAtivarTenantMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<string> | string)) => {
  return http.put('*/api/tenant/activate', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAtivarTenantResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDesativarTenantMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<string> | string)) => {
  return http.put('*/api/tenant/deactivate', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDesativarTenantResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getObterStringDeConex√£oDoTenantMockHandler = (overrideResponse?: TenantStrConnResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TenantStrConnResponse> | TenantStrConnResponse)) => {
  return http.get('*/api/tenant/get-connectionstring', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getObterStringDeConex√£oDoTenantResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getTenantsMock = () => [
  getObterListaDeTenantsMockHandler(),
  getObterTenantPorIdMockHandler(),
  getObterTenantsPorGrupoMockHandler(),
  getObterTodosOsGruposDeTenantsMockHandler(),
  getCriarTenantMockHandler(),
  getAtivarTenantMockHandler(),
  getDesativarTenantMockHandler(),
  getObterStringDeConex√£oDoTenantMockHandler()]
